# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4
# This is an example of using VeraDemoDotNet test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.

trigger:
- main

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

pool:
  vmImage: 'windows-latest'
  #vmImage: 'ubuntu-latest'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# Build the application
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Veracode upload static scan
- task: Veracode@3
  inputs:
    # Access with service connection or API credentials
    ConnectionDetailsSelection: 'Service Connection'
    # Service connection name
    AnalysisService: 'Veracode'
    veracodeAppProfile: 'Verademo-dotnet'
    # Name of the scan
    version: '$(build.buildNumber)'
    # Filepath to upload
    filepath: '$(build.artifactstagingdirectory)'
    # Using exisiting sandbox
    sandboxName: 'Azure DevOps'
    # Optional arguments:
    # Delete a scan with status of incomplete, no modules defined, failed, or cancelled
    optargs: '-deleteIncompleteScan 1'
    # deleteIncompleteScan: 1
    createProfile: false
    createSandbox: false
    # Fail the build if the application fails policy
    failBuildOnPolicyFail: false
    # Fail the build if task fails to start
    failBuildIfUploadAndScanBuildStepFails: false
    # To view scan results in Azure DevOps
    importResults: false
    # Wait time in minutes to fail the build if no scan results available
    maximumWaitTime: '360'

- task: CmdLine@2
  displayName: Veracode Static Pipeline Scanner
  inputs:
      # || true is to not fail the build if flaw is detected during the pipeline scan
    script: |
      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      unzip -o pipeline-scan-LATEST.zip
      java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f $(build.artifactstagingdirectory)\Verademo-dotnet.zip || true

- task: PublishBuildArtifacts@1
  displayName: Create Build Artifact for Veracode Static Pipeline Scanner Results
  inputs:
    PathtoPublish: '"results.json'
    ArtifactName: 'Build'
    publishLocation: 'Container'

- task: PowerShell@2
  displayName: Veracode Software Composition Analysis
  env:
    SRCCLR_API_TOKEN: $(SRCCLR_API_TOKEN)
  inputs:
    targetType: 'inline'
    # Set execution policy to AllSigned because PowerShell does not permit scripts to run by default
    script: |
      Set-ExecutionPolicy AllSigned -Scope Process -Force
      iex ((New-Object System.Net.WebClient).DownloadString('https://download.srcclr.com/ci.ps1'))
      srcclr scan --allow-dirty

- task: Veracode Flaw Importer@3
  inputs:
    # Access with service connection or API credentials
    ConnectionDetailsSelection: 'Service Connection'
    # Service connection name
    AnalysisService: 'Veracode'
    veracodeAppProfile: 'Verademo-dotnet'
    sandboxName: 'Azure DevOps'
    scanType: 'Dynamic, Static, and Software Composition Analysis'
    # List of flaw types:
    # All Flaws, All Unmitigated Flaws, All Flaws Violating Policy, All Unmitigated Flaws Violating Policy
    importType: 'All Unmitigated Flaws Violating Policy'
    # List of work item types:
    # Bug, Issue, Task, Epic, Feature, Test Case
    workItemType: 'Issue'
    # Path to the area for grouping the work items
    area: '$(system.teamProject)'
    # Set true to replace the area path
    overwriteAreaPathInWorkItemsOnImport: true
    # Add CWE ID to all work items
    addCweAsATag: true
    # Add a tag with the build number that Veracode discovered the flaw
    foundInBuild: true
    # Maximum number of flaws to import at the same time
    flawImportLimit: '1000'
